/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.analysis;

import sc.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseADecvarldecfoncProgramme(ADecvarldecfoncProgramme node);
    void caseALdecfoncProgramme(ALdecfoncProgramme node);
    void caseAOptdecvar(AOptdecvar node);
    void caseADecvarldecvarListedecvar(ADecvarldecvarListedecvar node);
    void caseADecvarListedecvar(ADecvarListedecvar node);
    void caseADecvarldecvarListedecvarbis(ADecvarldecvarListedecvarbis node);
    void caseADecvarListedecvarbis(ADecvarListedecvarbis node);
    void caseADecvarentierDecvar(ADecvarentierDecvar node);
    void caseADecvartableauDecvar(ADecvartableauDecvar node);
    void caseALdecfoncrecListedecfonc(ALdecfoncrecListedecfonc node);
    void caseALdecfoncfinalListedecfonc(ALdecfoncfinalListedecfonc node);
    void caseADecvarinstrDecfonc(ADecvarinstrDecfonc node);
    void caseAInstrDecfonc(AInstrDecfonc node);
    void caseASansparamListeparam(ASansparamListeparam node);
    void caseAAvecparamListeparam(AAvecparamListeparam node);
    void caseAInstraffectInstr(AInstraffectInstr node);
    void caseAInstrblocInstr(AInstrblocInstr node);
    void caseAInstrsiInstr(AInstrsiInstr node);
    void caseAInstrtantqueInstr(AInstrtantqueInstr node);
    void caseAInstrappelInstr(AInstrappelInstr node);
    void caseAInstrretourInstr(AInstrretourInstr node);
    void caseAInstrecritureInstr(AInstrecritureInstr node);
    void caseAInstrvideInstr(AInstrvideInstr node);
    void caseAInstraffect(AInstraffect node);
    void caseAInstrbloc(AInstrbloc node);
    void caseALinstrecListeinst(ALinstrecListeinst node);
    void caseALinstfinalListeinst(ALinstfinalListeinst node);
    void caseAAvecsinonInstrsi(AAvecsinonInstrsi node);
    void caseASanssinonInstrsi(ASanssinonInstrsi node);
    void caseAInstrsinon(AInstrsinon node);
    void caseAInstrtantque(AInstrtantque node);
    void caseAInstrappel(AInstrappel node);
    void caseAInstrretour(AInstrretour node);
    void caseAInstrecriture(AInstrecriture node);
    void caseAInstrvide(AInstrvide node);
    void caseAOuExp(AOuExp node);
    void caseAExp1Exp(AExp1Exp node);
    void caseAEtExp1(AEtExp1 node);
    void caseAExp2Exp1(AExp2Exp1 node);
    void caseAInfExp2(AInfExp2 node);
    void caseAEgalExp2(AEgalExp2 node);
    void caseAExp3Exp2(AExp3Exp2 node);
    void caseAPlusExp3(APlusExp3 node);
    void caseAMoinsExp3(AMoinsExp3 node);
    void caseAExp4Exp3(AExp4Exp3 node);
    void caseAFoisExp4(AFoisExp4 node);
    void caseADiviseExp4(ADiviseExp4 node);
    void caseAExp5Exp4(AExp5Exp4 node);
    void caseANonExp5(ANonExp5 node);
    void caseAExp6Exp5(AExp6Exp5 node);
    void caseANombreExp6(ANombreExp6 node);
    void caseAAppelfctExp6(AAppelfctExp6 node);
    void caseAVarExp6(AVarExp6 node);
    void caseAParenthesesExp6(AParenthesesExp6 node);
    void caseALireExp6(ALireExp6 node);
    void caseAVartabVar(AVartabVar node);
    void caseAVarsimpleVar(AVarsimpleVar node);
    void caseARecursifListeexp(ARecursifListeexp node);
    void caseAFinalListeexp(AFinalListeexp node);
    void caseARecursifListeexpbis(ARecursifListeexpbis node);
    void caseAFinalListeexpbis(AFinalListeexpbis node);
    void caseAAppelfct(AAppelfct node);

    void caseTEspaces(TEspaces node);
    void caseTCommentaire(TCommentaire node);
    void caseTVirgule(TVirgule node);
    void caseTDivise(TDivise node);
    void caseTPointVirgule(TPointVirgule node);
    void caseTFois(TFois node);
    void caseTMoins(TMoins node);
    void caseTParentheseOuvrante(TParentheseOuvrante node);
    void caseTParentheseFermante(TParentheseFermante node);
    void caseTCrochetOuvrant(TCrochetOuvrant node);
    void caseTCrochetFermant(TCrochetFermant node);
    void caseTAccoladeOuvrante(TAccoladeOuvrante node);
    void caseTAccoladeFermante(TAccoladeFermante node);
    void caseTEgal(TEgal node);
    void caseTInferieur(TInferieur node);
    void caseTEt(TEt node);
    void caseTOu(TOu node);
    void caseTNon(TNon node);
    void caseTPlus(TPlus node);
    void caseTSi(TSi node);
    void caseTAlors(TAlors node);
    void caseTSinon(TSinon node);
    void caseTTantque(TTantque node);
    void caseTFaire(TFaire node);
    void caseTEntier(TEntier node);
    void caseTRetour(TRetour node);
    void caseTLire(TLire node);
    void caseTEcrire(TEcrire node);
    void caseTNombre(TNombre node);
    void caseTIdentif(TIdentif node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}

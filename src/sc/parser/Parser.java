/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.parser;

import sc.lexer.*;
import sc.node.*;
import sc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgramme node1 = (PProgramme) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AEtiquetteProgramme */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AProgrammesuite */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AListedefonction */
            {
                ArrayList<Object> list = new2();
                push(goTo(2), list, false);
            }
            break;
            case 3: /* reduce ACoolListedefonction2 */
            {
                ArrayList<Object> list = new3();
                push(goTo(3), list, false);
            }
            break;
            case 4: /* reduce ARienListedefonction2 */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list, false);
            }
            break;
            case 5: /* reduce ADefonction */
            {
                ArrayList<Object> list = new5();
                push(goTo(4), list, false);
            }
            break;
            case 6: /* reduce ASuitefonction2Defonction2 */
            {
                ArrayList<Object> list = new6();
                push(goTo(5), list, false);
            }
            break;
            case 7: /* reduce ASuitefonctionDefonction2 */
            {
                ArrayList<Object> list = new7();
                push(goTo(5), list, false);
            }
            break;
            case 8: /* reduce ADefonction3 */
            {
                ArrayList<Object> list = new8();
                push(goTo(6), list, false);
            }
            break;
            case 9: /* reduce ABlocfonc */
            {
                ArrayList<Object> list = new9();
                push(goTo(7), list, false);
            }
            break;
            case 10: /* reduce ASimpleVar */
            {
                ArrayList<Object> list = new10();
                push(goTo(8), list, false);
            }
            break;
            case 11: /* reduce ADeriveVar */
            {
                ArrayList<Object> list = new11();
                push(goTo(8), list, false);
            }
            break;
            case 12: /* reduce ASimpleDeclarvar */
            {
                ArrayList<Object> list = new12();
                push(goTo(9), list, false);
            }
            break;
            case 13: /* reduce ADeriveDeclarvar */
            {
                ArrayList<Object> list = new13();
                push(goTo(9), list, false);
            }
            break;
            case 14: /* reduce AListevarListedeclarvar */
            {
                ArrayList<Object> list = new14();
                push(goTo(10), list, false);
            }
            break;
            case 15: /* reduce AVideListedeclarvar */
            {
                ArrayList<Object> list = new15();
                push(goTo(10), list, false);
            }
            break;
            case 16: /* reduce ASuitelistevarListdeclarvar2 */
            {
                ArrayList<Object> list = new16();
                push(goTo(11), list, false);
            }
            break;
            case 17: /* reduce AIllkillyouListdeclarvar2 */
            {
                ArrayList<Object> list = new17();
                push(goTo(11), list, false);
            }
            break;
            case 18: /* reduce AInstruvide */
            {
                ArrayList<Object> list = new18();
                push(goTo(12), list, false);
            }
            break;
            case 19: /* reduce AAffectation */
            {
                ArrayList<Object> list = new19();
                push(goTo(13), list, false);
            }
            break;
            case 20: /* reduce AOuExpr99 */
            {
                ArrayList<Object> list = new20();
                push(goTo(14), list, false);
            }
            break;
            case 21: /* reduce AExpr1Expr99 */
            {
                ArrayList<Object> list = new21();
                push(goTo(14), list, false);
            }
            break;
            case 22: /* reduce AEtExpr1 */
            {
                ArrayList<Object> list = new22();
                push(goTo(15), list, false);
            }
            break;
            case 23: /* reduce AExpr2Expr1 */
            {
                ArrayList<Object> list = new23();
                push(goTo(15), list, false);
            }
            break;
            case 24: /* reduce AEgalExpr2 */
            {
                ArrayList<Object> list = new24();
                push(goTo(16), list, false);
            }
            break;
            case 25: /* reduce AInfExpr2 */
            {
                ArrayList<Object> list = new25();
                push(goTo(16), list, false);
            }
            break;
            case 26: /* reduce ASupExpr2 */
            {
                ArrayList<Object> list = new26();
                push(goTo(16), list, false);
            }
            break;
            case 27: /* reduce AExpr3Expr2 */
            {
                ArrayList<Object> list = new27();
                push(goTo(16), list, false);
            }
            break;
            case 28: /* reduce APlusExpr3 */
            {
                ArrayList<Object> list = new28();
                push(goTo(17), list, false);
            }
            break;
            case 29: /* reduce AMoinsExpr3 */
            {
                ArrayList<Object> list = new29();
                push(goTo(17), list, false);
            }
            break;
            case 30: /* reduce AExpr4Expr3 */
            {
                ArrayList<Object> list = new30();
                push(goTo(17), list, false);
            }
            break;
            case 31: /* reduce AFoisExpr4 */
            {
                ArrayList<Object> list = new31();
                push(goTo(18), list, false);
            }
            break;
            case 32: /* reduce ADiviseExpr4 */
            {
                ArrayList<Object> list = new32();
                push(goTo(18), list, false);
            }
            break;
            case 33: /* reduce AExpr5Expr4 */
            {
                ArrayList<Object> list = new33();
                push(goTo(18), list, false);
            }
            break;
            case 34: /* reduce ANonExpr5 */
            {
                ArrayList<Object> list = new34();
                push(goTo(19), list, false);
            }
            break;
            case 35: /* reduce AExpr6Expr5 */
            {
                ArrayList<Object> list = new35();
                push(goTo(19), list, false);
            }
            break;
            case 36: /* reduce AParenthesageExpr6 */
            {
                ArrayList<Object> list = new36();
                push(goTo(20), list, false);
            }
            break;
            case 37: /* reduce ANombreExpr6 */
            {
                ArrayList<Object> list = new37();
                push(goTo(20), list, false);
            }
            break;
            case 38: /* reduce AIdentifExpr6 */
            {
                ArrayList<Object> list = new38();
                push(goTo(20), list, false);
            }
            break;
            case 39: /* reduce ALireExpr6 */
            {
                ArrayList<Object> list = new39();
                push(goTo(20), list, false);
            }
            break;
            case 40: /* reduce AAppelfunctionExpr6 */
            {
                ArrayList<Object> list = new40();
                push(goTo(20), list, false);
            }
            break;
            case 41: /* reduce AVreuiInstr */
            {
                ArrayList<Object> list = new41();
                push(goTo(21), list, false);
            }
            break;
            case 42: /* reduce AAffInstr */
            {
                ArrayList<Object> list = new42();
                push(goTo(21), list, false);
            }
            break;
            case 43: /* reduce AReturnInstr */
            {
                ArrayList<Object> list = new43();
                push(goTo(21), list, false);
            }
            break;
            case 44: /* reduce AEcrInstr */
            {
                ArrayList<Object> list = new44();
                push(goTo(21), list, false);
            }
            break;
            case 45: /* reduce AFonctionparamAppelf */
            {
                ArrayList<Object> list = new45();
                push(goTo(22), list, false);
            }
            break;
            case 46: /* reduce AInstructfonction */
            {
                ArrayList<Object> list = new46();
                push(goTo(23), list, false);
            }
            break;
            case 47: /* reduce AReturn */
            {
                ArrayList<Object> list = new47();
                push(goTo(24), list, false);
            }
            break;
            case 48: /* reduce AWrite */
            {
                ArrayList<Object> list = new48();
                push(goTo(25), list, false);
            }
            break;
            case 49: /* reduce AParamListexpr */
            {
                ArrayList<Object> list = new49();
                push(goTo(26), list, false);
            }
            break;
            case 50: /* reduce AVideListexpr */
            {
                ArrayList<Object> list = new50();
                push(goTo(26), list, false);
            }
            break;
            case 51: /* reduce ASuiteparamListexpr2 */
            {
                ArrayList<Object> list = new51();
                push(goTo(27), list, false);
            }
            break;
            case 52: /* reduce AVideListexpr2 */
            {
                ArrayList<Object> list = new52();
                push(goTo(27), list, false);
            }
            break;
            case 53: /* reduce ASiKeyword */
            {
                ArrayList<Object> list = new53();
                push(goTo(28), list, false);
            }
            break;
            case 54: /* reduce ATantqueKeyword */
            {
                ArrayList<Object> list = new54();
                push(goTo(28), list, false);
            }
            break;
            case 55: /* reduce ASiIf */
            {
                ArrayList<Object> list = new55();
                push(goTo(29), list, false);
            }
            break;
            case 56: /* reduce ASisinonIf */
            {
                ArrayList<Object> list = new56();
                push(goTo(29), list, false);
            }
            break;
            case 57: /* reduce AWololo */
            {
                ArrayList<Object> list = new57();
                push(goTo(30), list, false);
            }
            break;
            case 58: /* reduce ABloc */
            {
                ArrayList<Object> list = new58();
                push(goTo(31), list, false);
            }
            break;
            case 59: /* reduce ASuitexprBloc2 */
            {
                ArrayList<Object> list = new59();
                push(goTo(32), list, false);
            }
            break;
            case 60: /* reduce AKeywordBloc2 */
            {
                ArrayList<Object> list = new60();
                push(goTo(32), list, false);
            }
            break;
            case 61: /* reduce AGesrBloc2 */
            {
                ArrayList<Object> list = new61();
                push(goTo(32), list, false);
            }
            break;
            case 62: /* reduce AWhile */
            {
                ArrayList<Object> list = new62();
                push(goTo(33), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AEtiquetteProgramme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PListedeclarvar plistedeclarvarNode2;
        TPointVirgule tpointvirguleNode3;
        PProgrammesuite pprogrammesuiteNode4;
        plistedeclarvarNode2 = (PListedeclarvar)nodeArrayList1.get(0);
        tpointvirguleNode3 = (TPointVirgule)nodeArrayList2.get(0);
        pprogrammesuiteNode4 = (PProgrammesuite)nodeArrayList3.get(0);

        pprogrammeNode1 = new AEtiquetteProgramme(plistedeclarvarNode2, tpointvirguleNode3, pprogrammesuiteNode4);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AProgrammesuite */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgrammesuite pprogrammesuiteNode1;
        {
            // Block
        PListedefonction plistedefonctionNode2;
        plistedefonctionNode2 = (PListedefonction)nodeArrayList1.get(0);

        pprogrammesuiteNode1 = new AProgrammesuite(plistedefonctionNode2);
        }
	nodeList.add(pprogrammesuiteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AListedefonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListedefonction plistedefonctionNode1;
        {
            // Block
        PDefonction pdefonctionNode2;
        PListedefonction2 plistedefonction2Node3;
        pdefonctionNode2 = (PDefonction)nodeArrayList1.get(0);
        plistedefonction2Node3 = (PListedefonction2)nodeArrayList2.get(0);

        plistedefonctionNode1 = new AListedefonction(pdefonctionNode2, plistedefonction2Node3);
        }
	nodeList.add(plistedefonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ACoolListedefonction2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListedefonction2 plistedefonction2Node1;
        {
            // Block
        PDefonction pdefonctionNode2;
        PListedefonction2 plistedefonction2Node3;
        pdefonctionNode2 = (PDefonction)nodeArrayList1.get(0);
        plistedefonction2Node3 = (PListedefonction2)nodeArrayList2.get(0);

        plistedefonction2Node1 = new ACoolListedefonction2(pdefonctionNode2, plistedefonction2Node3);
        }
	nodeList.add(plistedefonction2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ARienListedefonction2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListedefonction2 plistedefonction2Node1;
        {
            // Block

        plistedefonction2Node1 = new ARienListedefonction2();
        }
	nodeList.add(plistedefonction2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ADefonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefonction pdefonctionNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TLp tlpNode3;
        PListedeclarvar plistedeclarvarNode4;
        TRp trpNode5;
        PDefonction2 pdefonction2Node6;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tlpNode3 = (TLp)nodeArrayList2.get(0);
        plistedeclarvarNode4 = (PListedeclarvar)nodeArrayList3.get(0);
        trpNode5 = (TRp)nodeArrayList4.get(0);
        pdefonction2Node6 = (PDefonction2)nodeArrayList5.get(0);

        pdefonctionNode1 = new ADefonction(tidentifNode2, tlpNode3, plistedeclarvarNode4, trpNode5, pdefonction2Node6);
        }
	nodeList.add(pdefonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ASuitefonction2Defonction2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefonction2 pdefonction2Node1;
        {
            // Block
        PListedeclarvar plistedeclarvarNode2;
        TPointVirgule tpointvirguleNode3;
        PDefonction3 pdefonction3Node4;
        plistedeclarvarNode2 = (PListedeclarvar)nodeArrayList1.get(0);
        tpointvirguleNode3 = (TPointVirgule)nodeArrayList2.get(0);
        pdefonction3Node4 = (PDefonction3)nodeArrayList3.get(0);

        pdefonction2Node1 = new ASuitefonction2Defonction2(plistedeclarvarNode2, tpointvirguleNode3, pdefonction3Node4);
        }
	nodeList.add(pdefonction2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ASuitefonctionDefonction2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefonction2 pdefonction2Node1;
        {
            // Block
        PDefonction3 pdefonction3Node2;
        pdefonction3Node2 = (PDefonction3)nodeArrayList1.get(0);

        pdefonction2Node1 = new ASuitefonctionDefonction2(pdefonction3Node2);
        }
	nodeList.add(pdefonction2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ADefonction3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefonction3 pdefonction3Node1;
        {
            // Block
        PBlocfonc pblocfoncNode2;
        pblocfoncNode2 = (PBlocfonc)nodeArrayList1.get(0);

        pdefonction3Node1 = new ADefonction3(pblocfoncNode2);
        }
	nodeList.add(pdefonction3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ABlocfonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlocfonc pblocfoncNode1;
        {
            // Block
        TAl talNode2;
        PBloc2 pbloc2Node3;
        TAr tarNode4;
        talNode2 = (TAl)nodeArrayList1.get(0);
        pbloc2Node3 = (PBloc2)nodeArrayList2.get(0);
        tarNode4 = (TAr)nodeArrayList3.get(0);

        pblocfoncNode1 = new ABlocfonc(talNode2, pbloc2Node3, tarNode4);
        }
	nodeList.add(pblocfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ASimpleVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentif tidentifNode2;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);

        pvarNode1 = new ASimpleVar(tidentifNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ADeriveVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TCl tclNode3;
        PExpr99 pexpr99Node4;
        TCr tcrNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tclNode3 = (TCl)nodeArrayList2.get(0);
        pexpr99Node4 = (PExpr99)nodeArrayList3.get(0);
        tcrNode5 = (TCr)nodeArrayList4.get(0);

        pvarNode1 = new ADeriveVar(tidentifNode2, tclNode3, pexpr99Node4, tcrNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ASimpleDeclarvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarvar pdeclarvarNode1;
        {
            // Block
        TEntier tentierNode2;
        TIdentif tidentifNode3;
        tentierNode2 = (TEntier)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);

        pdeclarvarNode1 = new ASimpleDeclarvar(tentierNode2, tidentifNode3);
        }
	nodeList.add(pdeclarvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ADeriveDeclarvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarvar pdeclarvarNode1;
        {
            // Block
        TEntier tentierNode2;
        TIdentif tidentifNode3;
        TCl tclNode4;
        PExpr99 pexpr99Node5;
        TCr tcrNode6;
        tentierNode2 = (TEntier)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tclNode4 = (TCl)nodeArrayList3.get(0);
        pexpr99Node5 = (PExpr99)nodeArrayList4.get(0);
        tcrNode6 = (TCr)nodeArrayList5.get(0);

        pdeclarvarNode1 = new ADeriveDeclarvar(tentierNode2, tidentifNode3, tclNode4, pexpr99Node5, tcrNode6);
        }
	nodeList.add(pdeclarvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AListevarListedeclarvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListedeclarvar plistedeclarvarNode1;
        {
            // Block
        PDeclarvar pdeclarvarNode2;
        PListdeclarvar2 plistdeclarvar2Node3;
        pdeclarvarNode2 = (PDeclarvar)nodeArrayList1.get(0);
        plistdeclarvar2Node3 = (PListdeclarvar2)nodeArrayList2.get(0);

        plistedeclarvarNode1 = new AListevarListedeclarvar(pdeclarvarNode2, plistdeclarvar2Node3);
        }
	nodeList.add(plistedeclarvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AVideListedeclarvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListedeclarvar plistedeclarvarNode1;
        {
            // Block

        plistedeclarvarNode1 = new AVideListedeclarvar();
        }
	nodeList.add(plistedeclarvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ASuitelistevarListdeclarvar2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListdeclarvar2 plistdeclarvar2Node1;
        {
            // Block
        TVirgule tvirguleNode2;
        PDeclarvar pdeclarvarNode3;
        PListdeclarvar2 plistdeclarvar2Node4;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pdeclarvarNode3 = (PDeclarvar)nodeArrayList2.get(0);
        plistdeclarvar2Node4 = (PListdeclarvar2)nodeArrayList3.get(0);

        plistdeclarvar2Node1 = new ASuitelistevarListdeclarvar2(tvirguleNode2, pdeclarvarNode3, plistdeclarvar2Node4);
        }
	nodeList.add(plistdeclarvar2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AIllkillyouListdeclarvar2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListdeclarvar2 plistdeclarvar2Node1;
        {
            // Block

        plistdeclarvar2Node1 = new AIllkillyouListdeclarvar2();
        }
	nodeList.add(plistdeclarvar2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AInstruvide */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruvide pinstruvideNode1;
        {
            // Block
        TPointVirgule tpointvirguleNode2;
        tpointvirguleNode2 = (TPointVirgule)nodeArrayList1.get(0);

        pinstruvideNode1 = new AInstruvide(tpointvirguleNode2);
        }
	nodeList.add(pinstruvideNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAffectation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAffectation paffectationNode1;
        {
            // Block
        PVar pvarNode2;
        TEgal tegalNode3;
        PExpr99 pexpr99Node4;
        TPointVirgule tpointvirguleNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tegalNode3 = (TEgal)nodeArrayList2.get(0);
        pexpr99Node4 = (PExpr99)nodeArrayList3.get(0);
        tpointvirguleNode5 = (TPointVirgule)nodeArrayList4.get(0);

        paffectationNode1 = new AAffectation(pvarNode2, tegalNode3, pexpr99Node4, tpointvirguleNode5);
        }
	nodeList.add(paffectationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AOuExpr99 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr99 pexpr99Node1;
        {
            // Block
        PExpr99 pexpr99Node2;
        TOu touNode3;
        PExpr1 pexpr1Node4;
        pexpr99Node2 = (PExpr99)nodeArrayList1.get(0);
        touNode3 = (TOu)nodeArrayList2.get(0);
        pexpr1Node4 = (PExpr1)nodeArrayList3.get(0);

        pexpr99Node1 = new AOuExpr99(pexpr99Node2, touNode3, pexpr1Node4);
        }
	nodeList.add(pexpr99Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AExpr1Expr99 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr99 pexpr99Node1;
        {
            // Block
        PExpr1 pexpr1Node2;
        pexpr1Node2 = (PExpr1)nodeArrayList1.get(0);

        pexpr99Node1 = new AExpr1Expr99(pexpr1Node2);
        }
	nodeList.add(pexpr99Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AEtExpr1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr1 pexpr1Node1;
        {
            // Block
        PExpr1 pexpr1Node2;
        TEt tetNode3;
        PExpr2 pexpr2Node4;
        pexpr1Node2 = (PExpr1)nodeArrayList1.get(0);
        tetNode3 = (TEt)nodeArrayList2.get(0);
        pexpr2Node4 = (PExpr2)nodeArrayList3.get(0);

        pexpr1Node1 = new AEtExpr1(pexpr1Node2, tetNode3, pexpr2Node4);
        }
	nodeList.add(pexpr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AExpr2Expr1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr1 pexpr1Node1;
        {
            // Block
        PExpr2 pexpr2Node2;
        pexpr2Node2 = (PExpr2)nodeArrayList1.get(0);

        pexpr1Node1 = new AExpr2Expr1(pexpr2Node2);
        }
	nodeList.add(pexpr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AEgalExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr2 pexpr2Node1;
        {
            // Block
        PExpr2 pexpr2Node2;
        TEgal tegalNode3;
        PExpr3 pexpr3Node4;
        pexpr2Node2 = (PExpr2)nodeArrayList1.get(0);
        tegalNode3 = (TEgal)nodeArrayList2.get(0);
        pexpr3Node4 = (PExpr3)nodeArrayList3.get(0);

        pexpr2Node1 = new AEgalExpr2(pexpr2Node2, tegalNode3, pexpr3Node4);
        }
	nodeList.add(pexpr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AInfExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr2 pexpr2Node1;
        {
            // Block
        PExpr2 pexpr2Node2;
        TInf tinfNode3;
        PExpr3 pexpr3Node4;
        pexpr2Node2 = (PExpr2)nodeArrayList1.get(0);
        tinfNode3 = (TInf)nodeArrayList2.get(0);
        pexpr3Node4 = (PExpr3)nodeArrayList3.get(0);

        pexpr2Node1 = new AInfExpr2(pexpr2Node2, tinfNode3, pexpr3Node4);
        }
	nodeList.add(pexpr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ASupExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr2 pexpr2Node1;
        {
            // Block
        PExpr2 pexpr2Node2;
        TSup tsupNode3;
        PExpr3 pexpr3Node4;
        pexpr2Node2 = (PExpr2)nodeArrayList1.get(0);
        tsupNode3 = (TSup)nodeArrayList2.get(0);
        pexpr3Node4 = (PExpr3)nodeArrayList3.get(0);

        pexpr2Node1 = new ASupExpr2(pexpr2Node2, tsupNode3, pexpr3Node4);
        }
	nodeList.add(pexpr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AExpr3Expr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr2 pexpr2Node1;
        {
            // Block
        PExpr3 pexpr3Node2;
        pexpr3Node2 = (PExpr3)nodeArrayList1.get(0);

        pexpr2Node1 = new AExpr3Expr2(pexpr3Node2);
        }
	nodeList.add(pexpr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce APlusExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr3 pexpr3Node1;
        {
            // Block
        PExpr3 pexpr3Node2;
        TPlus tplusNode3;
        PExpr4 pexpr4Node4;
        pexpr3Node2 = (PExpr3)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexpr4Node4 = (PExpr4)nodeArrayList3.get(0);

        pexpr3Node1 = new APlusExpr3(pexpr3Node2, tplusNode3, pexpr4Node4);
        }
	nodeList.add(pexpr3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AMoinsExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr3 pexpr3Node1;
        {
            // Block
        PExpr3 pexpr3Node2;
        TMoins tmoinsNode3;
        PExpr4 pexpr4Node4;
        pexpr3Node2 = (PExpr3)nodeArrayList1.get(0);
        tmoinsNode3 = (TMoins)nodeArrayList2.get(0);
        pexpr4Node4 = (PExpr4)nodeArrayList3.get(0);

        pexpr3Node1 = new AMoinsExpr3(pexpr3Node2, tmoinsNode3, pexpr4Node4);
        }
	nodeList.add(pexpr3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AExpr4Expr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr3 pexpr3Node1;
        {
            // Block
        PExpr4 pexpr4Node2;
        pexpr4Node2 = (PExpr4)nodeArrayList1.get(0);

        pexpr3Node1 = new AExpr4Expr3(pexpr4Node2);
        }
	nodeList.add(pexpr3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AFoisExpr4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr4 pexpr4Node1;
        {
            // Block
        PExpr4 pexpr4Node2;
        TFois tfoisNode3;
        PExpr5 pexpr5Node4;
        pexpr4Node2 = (PExpr4)nodeArrayList1.get(0);
        tfoisNode3 = (TFois)nodeArrayList2.get(0);
        pexpr5Node4 = (PExpr5)nodeArrayList3.get(0);

        pexpr4Node1 = new AFoisExpr4(pexpr4Node2, tfoisNode3, pexpr5Node4);
        }
	nodeList.add(pexpr4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ADiviseExpr4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr4 pexpr4Node1;
        {
            // Block
        PExpr4 pexpr4Node2;
        TDivise tdiviseNode3;
        PExpr5 pexpr5Node4;
        pexpr4Node2 = (PExpr4)nodeArrayList1.get(0);
        tdiviseNode3 = (TDivise)nodeArrayList2.get(0);
        pexpr5Node4 = (PExpr5)nodeArrayList3.get(0);

        pexpr4Node1 = new ADiviseExpr4(pexpr4Node2, tdiviseNode3, pexpr5Node4);
        }
	nodeList.add(pexpr4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AExpr5Expr4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr4 pexpr4Node1;
        {
            // Block
        PExpr5 pexpr5Node2;
        pexpr5Node2 = (PExpr5)nodeArrayList1.get(0);

        pexpr4Node1 = new AExpr5Expr4(pexpr5Node2);
        }
	nodeList.add(pexpr4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ANonExpr5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr5 pexpr5Node1;
        {
            // Block
        TNon tnonNode2;
        PExpr5 pexpr5Node3;
        tnonNode2 = (TNon)nodeArrayList1.get(0);
        pexpr5Node3 = (PExpr5)nodeArrayList2.get(0);

        pexpr5Node1 = new ANonExpr5(tnonNode2, pexpr5Node3);
        }
	nodeList.add(pexpr5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AExpr6Expr5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr5 pexpr5Node1;
        {
            // Block
        PExpr6 pexpr6Node2;
        pexpr6Node2 = (PExpr6)nodeArrayList1.get(0);

        pexpr5Node1 = new AExpr6Expr5(pexpr6Node2);
        }
	nodeList.add(pexpr5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AParenthesageExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        TLp tlpNode2;
        PExpr99 pexpr99Node3;
        TRp trpNode4;
        tlpNode2 = (TLp)nodeArrayList1.get(0);
        pexpr99Node3 = (PExpr99)nodeArrayList2.get(0);
        trpNode4 = (TRp)nodeArrayList3.get(0);

        pexpr6Node1 = new AParenthesageExpr6(tlpNode2, pexpr99Node3, trpNode4);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ANombreExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        TNombre tnombreNode2;
        tnombreNode2 = (TNombre)nodeArrayList1.get(0);

        pexpr6Node1 = new ANombreExpr6(tnombreNode2);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AIdentifExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexpr6Node1 = new AIdentifExpr6(pvarNode2);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ALireExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        TLire tlireNode2;
        TLp tlpNode3;
        TRp trpNode4;
        tlireNode2 = (TLire)nodeArrayList1.get(0);
        tlpNode3 = (TLp)nodeArrayList2.get(0);
        trpNode4 = (TRp)nodeArrayList3.get(0);

        pexpr6Node1 = new ALireExpr6(tlireNode2, tlpNode3, trpNode4);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAppelfunctionExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        PAppelf pappelfNode2;
        pappelfNode2 = (PAppelf)nodeArrayList1.get(0);

        pexpr6Node1 = new AAppelfunctionExpr6(pappelfNode2);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AVreuiInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PInstructfonction pinstructfonctionNode2;
        pinstructfonctionNode2 = (PInstructfonction)nodeArrayList1.get(0);

        pinstrNode1 = new AVreuiInstr(pinstructfonctionNode2);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAffInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PAffectation paffectationNode2;
        paffectationNode2 = (PAffectation)nodeArrayList1.get(0);

        pinstrNode1 = new AAffInstr(paffectationNode2);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AReturnInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PReturn preturnNode2;
        preturnNode2 = (PReturn)nodeArrayList1.get(0);

        pinstrNode1 = new AReturnInstr(preturnNode2);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AEcrInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PWrite pwriteNode2;
        pwriteNode2 = (PWrite)nodeArrayList1.get(0);

        pinstrNode1 = new AEcrInstr(pwriteNode2);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AFonctionparamAppelf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAppelf pappelfNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TLp tlpNode3;
        PListexpr plistexprNode4;
        TRp trpNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tlpNode3 = (TLp)nodeArrayList2.get(0);
        plistexprNode4 = (PListexpr)nodeArrayList3.get(0);
        trpNode5 = (TRp)nodeArrayList4.get(0);

        pappelfNode1 = new AFonctionparamAppelf(tidentifNode2, tlpNode3, plistexprNode4, trpNode5);
        }
	nodeList.add(pappelfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AInstructfonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstructfonction pinstructfonctionNode1;
        {
            // Block
        PAppelf pappelfNode2;
        TPointVirgule tpointvirguleNode3;
        pappelfNode2 = (PAppelf)nodeArrayList1.get(0);
        tpointvirguleNode3 = (TPointVirgule)nodeArrayList2.get(0);

        pinstructfonctionNode1 = new AInstructfonction(pappelfNode2, tpointvirguleNode3);
        }
	nodeList.add(pinstructfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AReturn */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturn preturnNode1;
        {
            // Block
        TRetour tretourNode2;
        PExpr99 pexpr99Node3;
        TPointVirgule tpointvirguleNode4;
        tretourNode2 = (TRetour)nodeArrayList1.get(0);
        pexpr99Node3 = (PExpr99)nodeArrayList2.get(0);
        tpointvirguleNode4 = (TPointVirgule)nodeArrayList3.get(0);

        preturnNode1 = new AReturn(tretourNode2, pexpr99Node3, tpointvirguleNode4);
        }
	nodeList.add(preturnNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AWrite */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWrite pwriteNode1;
        {
            // Block
        TEcrire tecrireNode2;
        TLp tlpNode3;
        PExpr99 pexpr99Node4;
        TRp trpNode5;
        TPointVirgule tpointvirguleNode6;
        tecrireNode2 = (TEcrire)nodeArrayList1.get(0);
        tlpNode3 = (TLp)nodeArrayList2.get(0);
        pexpr99Node4 = (PExpr99)nodeArrayList3.get(0);
        trpNode5 = (TRp)nodeArrayList4.get(0);
        tpointvirguleNode6 = (TPointVirgule)nodeArrayList5.get(0);

        pwriteNode1 = new AWrite(tecrireNode2, tlpNode3, pexpr99Node4, trpNode5, tpointvirguleNode6);
        }
	nodeList.add(pwriteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AParamListexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListexpr plistexprNode1;
        {
            // Block
        PExpr99 pexpr99Node2;
        PListexpr2 plistexpr2Node3;
        pexpr99Node2 = (PExpr99)nodeArrayList1.get(0);
        plistexpr2Node3 = (PListexpr2)nodeArrayList2.get(0);

        plistexprNode1 = new AParamListexpr(pexpr99Node2, plistexpr2Node3);
        }
	nodeList.add(plistexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AVideListexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListexpr plistexprNode1;
        {
            // Block

        plistexprNode1 = new AVideListexpr();
        }
	nodeList.add(plistexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ASuiteparamListexpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListexpr2 plistexpr2Node1;
        {
            // Block
        TVirgule tvirguleNode2;
        PExpr99 pexpr99Node3;
        PListexpr2 plistexpr2Node4;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pexpr99Node3 = (PExpr99)nodeArrayList2.get(0);
        plistexpr2Node4 = (PListexpr2)nodeArrayList3.get(0);

        plistexpr2Node1 = new ASuiteparamListexpr2(tvirguleNode2, pexpr99Node3, plistexpr2Node4);
        }
	nodeList.add(plistexpr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AVideListexpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListexpr2 plistexpr2Node1;
        {
            // Block

        plistexpr2Node1 = new AVideListexpr2();
        }
	nodeList.add(plistexpr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ASiKeyword */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PKeyword pkeywordNode1;
        {
            // Block
        PIf pifNode2;
        pifNode2 = (PIf)nodeArrayList1.get(0);

        pkeywordNode1 = new ASiKeyword(pifNode2);
        }
	nodeList.add(pkeywordNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ATantqueKeyword */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PKeyword pkeywordNode1;
        {
            // Block
        PWhile pwhileNode2;
        pwhileNode2 = (PWhile)nodeArrayList1.get(0);

        pkeywordNode1 = new ATantqueKeyword(pwhileNode2);
        }
	nodeList.add(pkeywordNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ASiIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIf pifNode1;
        {
            // Block
        TSi tsiNode2;
        PExpr99 pexpr99Node3;
        TAlors talorsNode4;
        PBloc pblocNode5;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexpr99Node3 = (PExpr99)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pblocNode5 = (PBloc)nodeArrayList4.get(0);

        pifNode1 = new ASiIf(tsiNode2, pexpr99Node3, talorsNode4, pblocNode5);
        }
	nodeList.add(pifNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ASisinonIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIf pifNode1;
        {
            // Block
        TSi tsiNode2;
        PExpr99 pexpr99Node3;
        TAlors talorsNode4;
        PBloc pblocNode5;
        TSinon tsinonNode6;
        PWololo pwololoNode7;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexpr99Node3 = (PExpr99)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pblocNode5 = (PBloc)nodeArrayList4.get(0);
        tsinonNode6 = (TSinon)nodeArrayList5.get(0);
        pwololoNode7 = (PWololo)nodeArrayList6.get(0);

        pifNode1 = new ASisinonIf(tsiNode2, pexpr99Node3, talorsNode4, pblocNode5, tsinonNode6, pwololoNode7);
        }
	nodeList.add(pifNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AWololo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWololo pwololoNode1;
        {
            // Block
        PBloc pblocNode2;
        pblocNode2 = (PBloc)nodeArrayList1.get(0);

        pwololoNode1 = new AWololo(pblocNode2);
        }
	nodeList.add(pwololoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ABloc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloc pblocNode1;
        {
            // Block
        TAl talNode2;
        PBloc2 pbloc2Node3;
        TAr tarNode4;
        talNode2 = (TAl)nodeArrayList1.get(0);
        pbloc2Node3 = (PBloc2)nodeArrayList2.get(0);
        tarNode4 = (TAr)nodeArrayList3.get(0);

        pblocNode1 = new ABloc(talNode2, pbloc2Node3, tarNode4);
        }
	nodeList.add(pblocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ASuitexprBloc2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloc2 pbloc2Node1;
        {
            // Block
        PInstr pinstrNode2;
        PBloc2 pbloc2Node3;
        pinstrNode2 = (PInstr)nodeArrayList1.get(0);
        pbloc2Node3 = (PBloc2)nodeArrayList2.get(0);

        pbloc2Node1 = new ASuitexprBloc2(pinstrNode2, pbloc2Node3);
        }
	nodeList.add(pbloc2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AKeywordBloc2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloc2 pbloc2Node1;
        {
            // Block
        PKeyword pkeywordNode2;
        pkeywordNode2 = (PKeyword)nodeArrayList1.get(0);

        pbloc2Node1 = new AKeywordBloc2(pkeywordNode2);
        }
	nodeList.add(pbloc2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AGesrBloc2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PBloc2 pbloc2Node1;
        {
            // Block

        pbloc2Node1 = new AGesrBloc2();
        }
	nodeList.add(pbloc2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AWhile */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWhile pwhileNode1;
        {
            // Block
        TTantque ttantqueNode2;
        PExpr99 pexpr99Node3;
        TFaire tfaireNode4;
        PBloc pblocNode5;
        ttantqueNode2 = (TTantque)nodeArrayList1.get(0);
        pexpr99Node3 = (PExpr99)nodeArrayList2.get(0);
        tfaireNode4 = (TFaire)nodeArrayList3.get(0);
        pblocNode5 = (PBloc)nodeArrayList4.get(0);

        pwhileNode1 = new AWhile(ttantqueNode2, pexpr99Node3, tfaireNode4, pblocNode5);
        }
	nodeList.add(pwhileNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 15}, {23, SHIFT, 1}, },
			{{-1, ERROR, 1}, {27, SHIFT, 5}, },
			{{-1, ERROR, 2}, {29, ACCEPT, -1}, },
			{{-1, REDUCE, 17}, {1, SHIFT, 6}, },
			{{-1, ERROR, 4}, {0, SHIFT, 8}, },
			{{-1, REDUCE, 12}, {9, SHIFT, 9}, },
			{{-1, ERROR, 6}, {23, SHIFT, 1}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 8}, {27, SHIFT, 11}, },
			{{-1, ERROR, 9}, {6, SHIFT, 15}, {17, SHIFT, 16}, {25, SHIFT, 17}, {27, SHIFT, 18}, {28, SHIFT, 19}, },
			{{-1, REDUCE, 17}, {1, SHIFT, 6}, },
			{{-1, ERROR, 11}, {6, SHIFT, 30}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 4}, {27, SHIFT, 11}, },
			{{-1, ERROR, 15}, {6, SHIFT, 15}, {17, SHIFT, 16}, {25, SHIFT, 17}, {27, SHIFT, 18}, {28, SHIFT, 19}, },
			{{-1, ERROR, 16}, {6, SHIFT, 15}, {17, SHIFT, 16}, {25, SHIFT, 17}, {27, SHIFT, 18}, {28, SHIFT, 19}, },
			{{-1, ERROR, 17}, {6, SHIFT, 35}, },
			{{-1, REDUCE, 10}, {6, SHIFT, 36}, {9, SHIFT, 37}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 21}, {8, SHIFT, 38}, {16, SHIFT, 39}, },
			{{-1, REDUCE, 21}, {15, SHIFT, 40}, },
			{{-1, REDUCE, 23}, {12, SHIFT, 41}, {13, SHIFT, 42}, {14, SHIFT, 43}, },
			{{-1, REDUCE, 27}, {2, SHIFT, 44}, {3, SHIFT, 45}, },
			{{-1, REDUCE, 30}, {4, SHIFT, 46}, {5, SHIFT, 47}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 15}, {23, SHIFT, 1}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 4}, {27, SHIFT, 11}, },
			{{-1, ERROR, 33}, {7, SHIFT, 50}, {16, SHIFT, 39}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 35}, {7, SHIFT, 51}, },
			{{-1, REDUCE, 50}, {6, SHIFT, 15}, {17, SHIFT, 16}, {25, SHIFT, 17}, {27, SHIFT, 18}, {28, SHIFT, 19}, },
			{{-1, ERROR, 37}, {6, SHIFT, 15}, {17, SHIFT, 16}, {25, SHIFT, 17}, {27, SHIFT, 18}, {28, SHIFT, 19}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 39}, {6, SHIFT, 15}, {17, SHIFT, 16}, {25, SHIFT, 17}, {27, SHIFT, 18}, {28, SHIFT, 19}, },
			{{-1, ERROR, 40}, {6, SHIFT, 15}, {17, SHIFT, 16}, {25, SHIFT, 17}, {27, SHIFT, 18}, {28, SHIFT, 19}, },
			{{-1, ERROR, 41}, {6, SHIFT, 15}, {17, SHIFT, 16}, {25, SHIFT, 17}, {27, SHIFT, 18}, {28, SHIFT, 19}, },
			{{-1, ERROR, 42}, {6, SHIFT, 15}, {17, SHIFT, 16}, {25, SHIFT, 17}, {27, SHIFT, 18}, {28, SHIFT, 19}, },
			{{-1, ERROR, 43}, {6, SHIFT, 15}, {17, SHIFT, 16}, {25, SHIFT, 17}, {27, SHIFT, 18}, {28, SHIFT, 19}, },
			{{-1, ERROR, 44}, {6, SHIFT, 15}, {17, SHIFT, 16}, {25, SHIFT, 17}, {27, SHIFT, 18}, {28, SHIFT, 19}, },
			{{-1, ERROR, 45}, {6, SHIFT, 15}, {17, SHIFT, 16}, {25, SHIFT, 17}, {27, SHIFT, 18}, {28, SHIFT, 19}, },
			{{-1, ERROR, 46}, {6, SHIFT, 15}, {17, SHIFT, 16}, {25, SHIFT, 17}, {27, SHIFT, 18}, {28, SHIFT, 19}, },
			{{-1, ERROR, 47}, {6, SHIFT, 15}, {17, SHIFT, 16}, {25, SHIFT, 17}, {27, SHIFT, 18}, {28, SHIFT, 19}, },
			{{-1, ERROR, 48}, {7, SHIFT, 64}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 52}, {1, SHIFT, 65}, {16, SHIFT, 39}, },
			{{-1, ERROR, 53}, {7, SHIFT, 67}, },
			{{-1, ERROR, 54}, {8, SHIFT, 68}, {16, SHIFT, 39}, },
			{{-1, REDUCE, 20}, {15, SHIFT, 40}, },
			{{-1, REDUCE, 22}, {12, SHIFT, 41}, {13, SHIFT, 42}, {14, SHIFT, 43}, },
			{{-1, REDUCE, 24}, {2, SHIFT, 44}, {3, SHIFT, 45}, },
			{{-1, REDUCE, 25}, {2, SHIFT, 44}, {3, SHIFT, 45}, },
			{{-1, REDUCE, 26}, {2, SHIFT, 44}, {3, SHIFT, 45}, },
			{{-1, REDUCE, 28}, {4, SHIFT, 46}, {5, SHIFT, 47}, },
			{{-1, REDUCE, 29}, {4, SHIFT, 46}, {5, SHIFT, 47}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 15}, {10, SHIFT, 69}, {23, SHIFT, 1}, },
			{{-1, ERROR, 65}, {6, SHIFT, 15}, {17, SHIFT, 16}, {25, SHIFT, 17}, {27, SHIFT, 18}, {28, SHIFT, 19}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 61}, {18, SHIFT, 75}, {21, SHIFT, 76}, {24, SHIFT, 77}, {26, SHIFT, 78}, {27, SHIFT, 18}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 73}, {0, SHIFT, 90}, },
			{{-1, REDUCE, 52}, {1, SHIFT, 65}, {16, SHIFT, 39}, },
			{{-1, ERROR, 75}, {6, SHIFT, 15}, {17, SHIFT, 16}, {25, SHIFT, 17}, {27, SHIFT, 18}, {28, SHIFT, 19}, },
			{{-1, ERROR, 76}, {6, SHIFT, 15}, {17, SHIFT, 16}, {25, SHIFT, 17}, {27, SHIFT, 18}, {28, SHIFT, 19}, },
			{{-1, ERROR, 77}, {6, SHIFT, 15}, {17, SHIFT, 16}, {25, SHIFT, 17}, {27, SHIFT, 18}, {28, SHIFT, 19}, },
			{{-1, ERROR, 78}, {6, SHIFT, 95}, },
			{{-1, ERROR, 79}, {12, SHIFT, 96}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 61}, {18, SHIFT, 75}, {21, SHIFT, 76}, {24, SHIFT, 77}, {26, SHIFT, 78}, {27, SHIFT, 18}, },
			{{-1, ERROR, 82}, {0, SHIFT, 98}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 88}, {11, SHIFT, 99}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 90}, {10, SHIFT, 69}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 92}, {16, SHIFT, 39}, {19, SHIFT, 101}, },
			{{-1, ERROR, 93}, {16, SHIFT, 39}, {22, SHIFT, 102}, },
			{{-1, ERROR, 94}, {0, SHIFT, 103}, {16, SHIFT, 39}, },
			{{-1, ERROR, 95}, {6, SHIFT, 15}, {17, SHIFT, 16}, {25, SHIFT, 17}, {27, SHIFT, 18}, {28, SHIFT, 19}, },
			{{-1, ERROR, 96}, {6, SHIFT, 15}, {17, SHIFT, 16}, {25, SHIFT, 17}, {27, SHIFT, 18}, {28, SHIFT, 19}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 101}, {10, SHIFT, 106}, },
			{{-1, ERROR, 102}, {10, SHIFT, 106}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 104}, {7, SHIFT, 109}, {16, SHIFT, 39}, },
			{{-1, ERROR, 105}, {0, SHIFT, 110}, {16, SHIFT, 39}, },
			{{-1, REDUCE, 61}, {18, SHIFT, 75}, {21, SHIFT, 76}, {24, SHIFT, 77}, {26, SHIFT, 78}, {27, SHIFT, 18}, },
			{{-1, REDUCE, 55}, {20, SHIFT, 112}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 109}, {0, SHIFT, 113}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 111}, {11, SHIFT, 114}, },
			{{-1, ERROR, 112}, {10, SHIFT, 106}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 57}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 12}, },
			{{-1, 13}, },
			{{-1, 31}, {32, 49}, },
			{{-1, 32}, {8, 14}, },
			{{-1, 70}, },
			{{-1, 71}, {90, 100}, },
			{{-1, 72}, },
			{{-1, 20}, {69, 79}, {81, 79}, {106, 79}, },
			{{-1, 3}, {6, 10}, },
			{{-1, 4}, {30, 48}, {64, 73}, },
			{{-1, 7}, {10, 29}, },
			{{-1, -1}, },
			{{-1, 80}, },
			{{-1, 21}, {15, 33}, {36, 52}, {37, 54}, {65, 74}, {75, 92}, {76, 93}, {77, 94}, {95, 104}, {96, 105}, },
			{{-1, 22}, {39, 55}, },
			{{-1, 23}, {40, 56}, },
			{{-1, 24}, {41, 57}, {42, 58}, {43, 59}, },
			{{-1, 25}, {44, 60}, {45, 61}, },
			{{-1, 26}, {16, 34}, {46, 62}, {47, 63}, },
			{{-1, 27}, },
			{{-1, 81}, },
			{{-1, 28}, {69, 82}, {81, 82}, {106, 82}, },
			{{-1, 83}, },
			{{-1, 84}, },
			{{-1, 85}, },
			{{-1, 53}, },
			{{-1, 66}, {74, 91}, },
			{{-1, 86}, },
			{{-1, 87}, },
			{{-1, 115}, },
			{{-1, 107}, {102, 108}, {112, 116}, },
			{{-1, 88}, {81, 97}, {106, 111}, },
			{{-1, 89}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: ';', 'entier'",
			"expecting: identif",
			"expecting: EOF",
			"expecting: ';', ',', ')'",
			"expecting: ';'",
			"expecting: ';', ',', ')', '['",
			"expecting: 'entier'",
			"expecting: ';', ')'",
			"expecting: '(', '!', 'lire', identif, nombre",
			"expecting: '('",
			"expecting: identif, EOF",
			"expecting: ';', ',', '+', '-', '*', '/', '(', ')', ']', '[', '=', '<', '>', '&', '|', 'alors', 'faire'",
			"expecting: ';', ',', '+', '-', '*', '/', ')', ']', '=', '<', '>', '&', '|', 'alors', 'faire'",
			"expecting: ']', '|'",
			"expecting: ';', ',', ')', ']', '&', '|', 'alors', 'faire'",
			"expecting: ';', ',', ')', ']', '=', '<', '>', '&', '|', 'alors', 'faire'",
			"expecting: ';', ',', '+', '-', ')', ']', '=', '<', '>', '&', '|', 'alors', 'faire'",
			"expecting: ')', 'entier'",
			"expecting: ')', '|'",
			"expecting: ')'",
			"expecting: '(', ')', '!', 'lire', identif, nombre",
			"expecting: ',', ')', '|'",
			"expecting: ';', '{', 'entier'",
			"expecting: '}', 'si', 'tantque', 'retour', 'ecrire', identif",
			"expecting: '='",
			"expecting: '}'",
			"expecting: '{'",
			"expecting: '|', 'alors'",
			"expecting: '|', 'faire'",
			"expecting: ';', '|'",
			"expecting: '}', 'sinon'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 6, 7, 1, 8, 3, 9, 2, 2, 10, 8, 8, 9, 11, 12, 12, 13, 14, 15, 16, 12, 12, 12, 12, 7, 17, 2, 10, 18, 12, 19, 20, 8, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 19, 2, 12, 12, 21, 19, 13, 14, 15, 16, 16, 16, 12, 12, 12, 12, 22, 8, 19, 12, 12, 23, 10, 10, 10, 4, 21, 8, 8, 8, 9, 24, 23, 23, 4, 23, 23, 23, 25, 25, 25, 25, 26, 19, 27, 28, 29, 8, 8, 25, 23, 10, 10, 26, 26, 23, 18, 29, 23, 30, 25, 4, 23, 25, 26, 23, 30, 25, 25, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}

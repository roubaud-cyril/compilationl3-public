/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AListevarListedeclarvar extends PListedeclarvar
{
    private PDeclarvar _declarvar_;
    private PListdeclarvar2 _listdeclarvar2_;

    public AListevarListedeclarvar()
    {
        // Constructor
    }

    public AListevarListedeclarvar(
        @SuppressWarnings("hiding") PDeclarvar _declarvar_,
        @SuppressWarnings("hiding") PListdeclarvar2 _listdeclarvar2_)
    {
        // Constructor
        setDeclarvar(_declarvar_);

        setListdeclarvar2(_listdeclarvar2_);

    }

    @Override
    public Object clone()
    {
        return new AListevarListedeclarvar(
            cloneNode(this._declarvar_),
            cloneNode(this._listdeclarvar2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListevarListedeclarvar(this);
    }

    public PDeclarvar getDeclarvar()
    {
        return this._declarvar_;
    }

    public void setDeclarvar(PDeclarvar node)
    {
        if(this._declarvar_ != null)
        {
            this._declarvar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._declarvar_ = node;
    }

    public PListdeclarvar2 getListdeclarvar2()
    {
        return this._listdeclarvar2_;
    }

    public void setListdeclarvar2(PListdeclarvar2 node)
    {
        if(this._listdeclarvar2_ != null)
        {
            this._listdeclarvar2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listdeclarvar2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._declarvar_)
            + toString(this._listdeclarvar2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._declarvar_ == child)
        {
            this._declarvar_ = null;
            return;
        }

        if(this._listdeclarvar2_ == child)
        {
            this._listdeclarvar2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._declarvar_ == oldChild)
        {
            setDeclarvar((PDeclarvar) newChild);
            return;
        }

        if(this._listdeclarvar2_ == oldChild)
        {
            setListdeclarvar2((PListdeclarvar2) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

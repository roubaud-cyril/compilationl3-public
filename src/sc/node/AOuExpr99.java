/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AOuExpr99 extends PExpr99
{
    private PExpr99 _expr99_;
    private TOu _ou_;
    private PExpr1 _expr1_;

    public AOuExpr99()
    {
        // Constructor
    }

    public AOuExpr99(
        @SuppressWarnings("hiding") PExpr99 _expr99_,
        @SuppressWarnings("hiding") TOu _ou_,
        @SuppressWarnings("hiding") PExpr1 _expr1_)
    {
        // Constructor
        setExpr99(_expr99_);

        setOu(_ou_);

        setExpr1(_expr1_);

    }

    @Override
    public Object clone()
    {
        return new AOuExpr99(
            cloneNode(this._expr99_),
            cloneNode(this._ou_),
            cloneNode(this._expr1_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOuExpr99(this);
    }

    public PExpr99 getExpr99()
    {
        return this._expr99_;
    }

    public void setExpr99(PExpr99 node)
    {
        if(this._expr99_ != null)
        {
            this._expr99_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr99_ = node;
    }

    public TOu getOu()
    {
        return this._ou_;
    }

    public void setOu(TOu node)
    {
        if(this._ou_ != null)
        {
            this._ou_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ou_ = node;
    }

    public PExpr1 getExpr1()
    {
        return this._expr1_;
    }

    public void setExpr1(PExpr1 node)
    {
        if(this._expr1_ != null)
        {
            this._expr1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr1_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expr99_)
            + toString(this._ou_)
            + toString(this._expr1_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expr99_ == child)
        {
            this._expr99_ = null;
            return;
        }

        if(this._ou_ == child)
        {
            this._ou_ = null;
            return;
        }

        if(this._expr1_ == child)
        {
            this._expr1_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expr99_ == oldChild)
        {
            setExpr99((PExpr99) newChild);
            return;
        }

        if(this._ou_ == oldChild)
        {
            setOu((TOu) newChild);
            return;
        }

        if(this._expr1_ == oldChild)
        {
            setExpr1((PExpr1) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

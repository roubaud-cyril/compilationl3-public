/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class ASisinonIf extends PIf
{
    private TSi _si_;
    private PExpr _expr_;
    private TAlors _alors_;
    private PBloc _bloc_;
    private TSinon _sinon_;
    private PBlocsinon _blocsinon_;

    public ASisinonIf()
    {
        // Constructor
    }

    public ASisinonIf(
        @SuppressWarnings("hiding") TSi _si_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TAlors _alors_,
        @SuppressWarnings("hiding") PBloc _bloc_,
        @SuppressWarnings("hiding") TSinon _sinon_,
        @SuppressWarnings("hiding") PBlocsinon _blocsinon_)
    {
        // Constructor
        setSi(_si_);

        setExpr(_expr_);

        setAlors(_alors_);

        setBloc(_bloc_);

        setSinon(_sinon_);

        setBlocsinon(_blocsinon_);

    }

    @Override
    public Object clone()
    {
        return new ASisinonIf(
            cloneNode(this._si_),
            cloneNode(this._expr_),
            cloneNode(this._alors_),
            cloneNode(this._bloc_),
            cloneNode(this._sinon_),
            cloneNode(this._blocsinon_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASisinonIf(this);
    }

    public TSi getSi()
    {
        return this._si_;
    }

    public void setSi(TSi node)
    {
        if(this._si_ != null)
        {
            this._si_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._si_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TAlors getAlors()
    {
        return this._alors_;
    }

    public void setAlors(TAlors node)
    {
        if(this._alors_ != null)
        {
            this._alors_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._alors_ = node;
    }

    public PBloc getBloc()
    {
        return this._bloc_;
    }

    public void setBloc(PBloc node)
    {
        if(this._bloc_ != null)
        {
            this._bloc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bloc_ = node;
    }

    public TSinon getSinon()
    {
        return this._sinon_;
    }

    public void setSinon(TSinon node)
    {
        if(this._sinon_ != null)
        {
            this._sinon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sinon_ = node;
    }

    public PBlocsinon getBlocsinon()
    {
        return this._blocsinon_;
    }

    public void setBlocsinon(PBlocsinon node)
    {
        if(this._blocsinon_ != null)
        {
            this._blocsinon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._blocsinon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._si_)
            + toString(this._expr_)
            + toString(this._alors_)
            + toString(this._bloc_)
            + toString(this._sinon_)
            + toString(this._blocsinon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._si_ == child)
        {
            this._si_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._alors_ == child)
        {
            this._alors_ = null;
            return;
        }

        if(this._bloc_ == child)
        {
            this._bloc_ = null;
            return;
        }

        if(this._sinon_ == child)
        {
            this._sinon_ = null;
            return;
        }

        if(this._blocsinon_ == child)
        {
            this._blocsinon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._si_ == oldChild)
        {
            setSi((TSi) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._alors_ == oldChild)
        {
            setAlors((TAlors) newChild);
            return;
        }

        if(this._bloc_ == oldChild)
        {
            setBloc((PBloc) newChild);
            return;
        }

        if(this._sinon_ == oldChild)
        {
            setSinon((TSinon) newChild);
            return;
        }

        if(this._blocsinon_ == oldChild)
        {
            setBlocsinon((PBlocsinon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

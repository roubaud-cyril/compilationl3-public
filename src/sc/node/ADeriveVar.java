/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class ADeriveVar extends PVar
{
    private TIdentif _identif_;
    private TCl _cl_;
    private PExpr _expr_;
    private TCr _cr_;

    public ADeriveVar()
    {
        // Constructor
    }

    public ADeriveVar(
        @SuppressWarnings("hiding") TIdentif _identif_,
        @SuppressWarnings("hiding") TCl _cl_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TCr _cr_)
    {
        // Constructor
        setIdentif(_identif_);

        setCl(_cl_);

        setExpr(_expr_);

        setCr(_cr_);

    }

    @Override
    public Object clone()
    {
        return new ADeriveVar(
            cloneNode(this._identif_),
            cloneNode(this._cl_),
            cloneNode(this._expr_),
            cloneNode(this._cr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADeriveVar(this);
    }

    public TIdentif getIdentif()
    {
        return this._identif_;
    }

    public void setIdentif(TIdentif node)
    {
        if(this._identif_ != null)
        {
            this._identif_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identif_ = node;
    }

    public TCl getCl()
    {
        return this._cl_;
    }

    public void setCl(TCl node)
    {
        if(this._cl_ != null)
        {
            this._cl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cl_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TCr getCr()
    {
        return this._cr_;
    }

    public void setCr(TCr node)
    {
        if(this._cr_ != null)
        {
            this._cr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identif_)
            + toString(this._cl_)
            + toString(this._expr_)
            + toString(this._cr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identif_ == child)
        {
            this._identif_ = null;
            return;
        }

        if(this._cl_ == child)
        {
            this._cl_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._cr_ == child)
        {
            this._cr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identif_ == oldChild)
        {
            setIdentif((TIdentif) newChild);
            return;
        }

        if(this._cl_ == oldChild)
        {
            setCl((TCl) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._cr_ == oldChild)
        {
            setCr((TCr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
